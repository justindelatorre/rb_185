#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def list_expenses
    result = @connection.exec('SELECT * FROM expenses ORDER BY id;')

    display_count(result)
    if result.ntuples > 0
      display_headers
      display_divider
      display_expenses(result)
    end
  end

  def add_expense(amount, memo)
    date = Date.today
    query = <<~SQL
      INSERT INTO expenses (amount, memo, created_on) 
      VALUES ($1, $2, $3);
    SQL
    
    @connection.exec_params(query, [amount, memo, date]) 
  end

  def search_expenses(memo)
    query = <<~SQL
      SELECT *
        FROM expenses
       WHERE memo LIKE $1;
    SQL

    result = @connection.exec_params(query, ["%#{memo}%"])
 
    display_count(result)
    if result.ntuples > 0
      display_headers
      display_divider
      display_expenses(result)
    end
  end

  def delete_expense(id)
    query = 'SELECT * FROM expenses WHERE id = $1;'
    result = @connection.exec_params(query, [id])

    if result.ntuples == 1
      delete_query = 'DELETE FROM expenses WHERE id = $1;'
      @connection.exec_params(delete_query, [id])
      puts 'The following expense has been deleted:'
      display_headers
      display_divider
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def clear_expenses
    @connection.exec('DELETE FROM expenses;') 
    puts 'All expenses have been deleted.'
  end

  private

  def setup_schema
    query = <<~SQL
      SELECT COUNT(*)
        FROM information_schema.tables
       WHERE table_schema = 'public'
         AND table_name = 'doesnotexist';
    SQL

    result = @connection.exec(query)

    if result[0]['count'].to_i.zero?
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(9,2) NOT NULL CHECK (amount > 0.00),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end

  def display_count(expenses)
    count = expenses.ntuples

    if count.zero?
      puts 'There are no expenses.'
    else
      puts "There are #{count} expense#{'s' if count != 1}."
    end
  end

  def display_headers
    puts [ 
           'id'.rjust(3),
           'created_on'.rjust(10),
           'amount'.rjust(12),
           'memo'.rjust(12)
         ].join(' | ')
  end

  def display_divider
    puts [ 
           '-' * 3, 
           '-' * 10,
           '-' * 12,
           '-' * 12
         ].join(' + ')
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple['id'].rjust(3),
                  tuple['created_on'].rjust(10),
                  tuple['amount'].rjust(12),
                  tuple['memo'] ]

      puts columns.join(' | ')
    end

    puts '-' * 48
    amount_sum = expenses.field_values('amount').map(&:to_f).inject(:+)
    puts "Total #{amount_sum.to_s.rjust(25)}"
  end

  def display_total(total)
    puts '----------------------------------------------'
    puts 'Total'.ljust(25) + total.ljust(23)
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift

    case command
    when 'add'
      amount = args[0]
      memo = args[1]

      abort 'You must provide an amount and memo.' unless amount && memo

      @application.add_expense(amount, memo)
    when 'list'
      @application.list_expenses 
    when 'search'
      memo = args[0]

      @application.search_expenses(memo)
    when 'delete'
      id = args[0]

      @application.delete_expense(id)
    when 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      response = $stdin.getch

      @application.clear_expenses if response == 'y'
    else
      display_help
    end
  end

  private

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end

end

CLI.new.run(ARGV)
